Correct code is -  https://github.com/MANOJ1804/devops002.git
==================================================== Kubernates Set Ups============================
Get Aws t2.medium ubuntu Servers
change hostname
 - sudo hostnamectl set-hostname control-plan
 - exec bash
  (all nodes/vm)
 - sudo vi /etc/hosts
   172.81.0.9 control-plan (for control plan only - write in control plan for all worker nodes)
   ### check with ping commnad (ping node01)
Setps to install and setup Kubernates
1 - 
cat << EOF | sudo tee /etc/modules-load.d/containerd.conf
overlay
br_netfilter
EOF

2 - sudo modprobe overlay
3 - sudo modprobe br_netfilter
4 -
cat << EOF | sudo tee /etc/sysctl.d/99-kubernetes-cri.conf
net.bridge.bridge-nf-call-iptable = 1
net.ipv4.ip_forward = 1
net.bridge.bridge-nf-call-ip6table = 1
EOF

5 - sudo sysctl --system
6 - sudo apt-get update && sudo apt-get install -y containerd
7 - sudo mkdir -p /etc/containerd
8 - sudo containerd config default | sudo tee /etc/containerd/config.toml
  (do not run this intially, do when you get port issue)    
              - sudo sed -i -e 's/SystemdCgroup = false/SystemdCgroup = true/g' /etc/containerd/config.toml 
			After this you need
					- sudo systemctl restart containerd
					- sudo systemctl status containerd
					- sudo systemctl restart kubectl
9 - sudo systemctl restart containerd
10 - sudo systemctl status containerd
11 - sudo swapoff -a
12 - ######free -h  (do not execute)
13 - sudo apt-get update && sudo apt-get install -y apt-transport-https curl
14 - echo "deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.29/deb/ /" | sudo tee /etc/apt/sources.list.d/kubernetes.list
15 - sudo mkdir -p /etc/apt/keyrings
16 - curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.29/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
17 - sudo apt-get update
18 - sudo apt-get install -y kubelet=1.29.0-1.1 kubeadm=1.29.0-1.1 kubectl=1.29.0-1.1
19 - sudo apt-mark hold kubelet kubeadm kubectl

(on control plan)
 20 - sudo kubeadm init --pod-network-cidr=192.168.0.0/16 --kubernetes-version 1.29.0
(above will give you a command that will return a command to join a node)
 21 - mkdir -p $HOME/.kube 
(at home directory/folder)
 22 - sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
(to check permission firt run "ls -ld .kube/config")
 23 - sudo chown $(id -u):$(id -g) $HOME/.kube/config
  (please do not forget to install below steps)
(to check if it is running)
 24 - kubectl get nodes
install calico
26 - kubectl create -f https://raw.githubusercontent.com/projectcalico/calico/v3.25.0/manifests/tigera-operator.yaml
27 - kubectl create -f https://raw.githubusercontent.com/projectcalico/calico/v3.25.0/manifests/custom-resources.yaml

28 - kubectl get nodes
29 - kubeadm token create --print-join-command
(you need to past the outcome to all nodes)
30 - kubeadm token generate 
(above will generate a new token)
31 - kubeadm token create tun6vu.hdcsupw628llgyli --print-join-command

================== If node is not ready state then execute below command
kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml

refrence -  https://stackoverflow.com/questions/49112336/container-runtime-network-not-ready-cni-config-uninitialized

other steps - https://github.com/DEVOPS-WITH-WEB-DEV/Kubeadm-cluster-setup/blob/main/README.md

======================== SET up Ansible ===================================

$ sudo apt update
$ sudo apt install software-properties-common
$ sudo add-apt-repository --yes --update ppa:ansible/ansible
$ sudo apt install ansible

======================== SET up Jenkins ===================================
sudo apt update
sudo apt install fontconfig openjdk-17-jre -y
java -version
sudo wget -O /usr/share/keyrings/jenkins-keyring.asc \
  https://pkg.jenkins.io/debian-stable/jenkins.io-2023.key

echo "deb [signed-by=/usr/share/keyrings/jenkins-keyring.asc]" \
  https://pkg.jenkins.io/debian-stable binary/ | sudo tee \
  /etc/apt/sources.list.d/jenkins.list > /dev/null

sudo apt-get update
sudo apt-get install jenkins -y
sudo systemctl enable jenkins
sudo systemctl start jenkins
sudo systemctl status jenkins


======================== SET up docker ===========================================


# Add Docker's official GPG key:
sudo apt-get update
sudo apt-get install ca-certificates curl -y
sudo install -m 0755 -d /etc/apt/keyrings
sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
sudo chmod a+r /etc/apt/keyrings/docker.asc

# Add the repository to Apt sources:
echo \
  "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
  $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \
  sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
sudo apt-get update

sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin -y
sudo usermod -aG docker ubuntu && newgrp docker
docker images

(check if docker works)

======================================== Password less Authentication (between servers) ================================

********Open Source System.( as of now this is jenkins)
- sudo su jenkins (login as jenkins becasue from jenkins you need to connect to destination system(ansible/docker/kubernates)
- cd (go to home directory of jenkins)
- pwd (to check /var/lib/jenkins )
- ssh-keygen
- cd .ssh/
- ls -a (you`ll get key are created like id_rsa and id_rsa.pub)

********Open destination system ( as of now this is anible/docker server)
- sudo su - (become root user)
- cd /etc/ssh
- vi ssh_config (open  this file and change passwordauthentication=yes)
- cd sshd_config.d/
- vi 60-clouding-setting.conf ( open this file and change passwordauthentication = yes)
- systemclt restart ssh (restart ssh service )
- passwd ubuntu ( set the password for ubuntu user)


********once all done. Go to source system and from source system (as of now here this is jenkins)
- ssh ubuntu@<private_ip_address_destination_system> (this i will ask for the password give ubuntu password)

********to make password less you need to copy ssh key
- cd ~
- ssh_copy_id ubuntu@<private_ip_address_destination_system>


========================================= Set up docker Login in Jenkins =============================
open pipeline syntex
use option " withcredential:bindcredentialto varible"
add " secret text"
varible - <any_name>
credentials -> click "add"
fill details
	- domain - global
	- kind - secret text
	- scope - global
	- secret - " give docker login password that you use to login docker hub"
	- id - <any_name>
	- description - <any_name>

click in generate pipeline

------------------

Connect from Ansible server to Kubernates ( to run anisble command in kubernates server)
- open Ansible server 
- sudo cd /etc/anisble
- sudo vi hosts
   - below Ex2.
        [node]
		<private_ip_address_of_kubernates control plan>
- ssh-keygen
- copy-ssh-id ubuntu@<private_ip_address_of_kubernates>

-----------------------  To get Clean formate of file-----------
- sudo apt install bat
- To Display "batcat <file_name_that you_need_to_see>
- To check docker image which port the application is running.
	- docker history <image_name>

----------------------- Basic command to Run Java Project in EC2 and open via public IP address---
1 - Take any Ec2 Instance (t2.micro)
2 - pwd (check present directory)
3 - git clone https://github.com/Fir3eye/springboot-demo.git
4 - sudo apt update
5 - sudo apt install openjdk-17-jdk
6 - sudo apt update
7 - sudo apt install maven
8 - Go inside the Project folder "cd <project_name>
9 - Ensure 'pom.xml" should be present then inside this folder execute "mvn clean install" (Clean and Install the Project)
10 -  mvn compile (compile)
11 - mvn package (build package)
12 - you`ll find a folder name "target is created"
13 - go inside "target" folder and you`ll file ".jar" file inside it.
14 - To run " java -jar <sendevops-0.0.1-SNAPSHOT.jar>" - this is will show at which port it is running.
15 - mvn clean install -X (incase of build issue)

--------------------------------------------------------------
****** Create kubenates deployment manifest file 

kubectl create deploy sprint-deploy --image=manojkumarab/springbootapp:latest --port=8080 --dry-run=client -o yaml >> sprint-deploy.yaml
****** To apply
kubectl apply -f sprint-deploy.yaml
******	To verify 
kubectl get pods

-------------------

****** Create kubenates Service manifest file

kubectl expose deploy sprint-deploy<this should be same as given in deploy file> --type=NodePort --port=8100<external world port> --target-port=8080<port given in deployment file> --dry-run=client -o yaml >> sprint-svc.yaml

***** Since the service is NodePort, you need to do Port-forwarding, to access externally

kubectl port-forward svc/sprint-deploy 8100:8100

