Get Aws t2.medium ubuntu Servers
change hostname
 - sudo hostnamectl set-hostname control-plan
 - exec bash
  (all nodes/vm)
 - sudo vi /etc/hosts
   172.81.0.9 control-plan (for control plan only - write in control plan for all worker nodes)
   ### check with ping commnad (ping node01)
Setps to install and setup Kubernates
1 - 
cat << EOF | sudo tee /etc/modules-load.d/containerd.conf
overlay
br_netfilter
EOF

2 - sudo modprobe overlay
3 - sudo modprobe br_netfilter
4 -
cat << EOF | sudo tee /etc/sysctl.d/99-kubernetes-cri.conf
net.bridge.bridge-nf-call-iptable = 1
net.ipv4.ip_forward = 1
net.bridge.bridge-nf-call-ip6table = 1
EOF

5 - sudo sysctl --system
6 - sudo apt-get update && sudo apt-get install -y containerd
7 - sudo mkdir -p /etc/containerd
8 - sudo containerd config default | sudo tee /etc/containerd/config.toml
  (do not run this intially, do when you get port issue)    
              - sudo sed -i -e 's/SystemdCgroup = false/SystemdCgroup = true/g' /etc/containerd/config.toml 
			After this you need
					- sudo systemctl restart containerd
					- sudo systemctl status containerd
					- sudo systemctl restart kubectl
9 - sudo systemctl restart containerd
10 - sudo systemctl status containerd
11 - sudo swapoff -a
12 - ######free -h  (do not execute)
13 - sudo apt-get update && sudo apt-get install -y apt-transport-https curl
14 - echo "deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.29/deb/ /" | sudo tee /etc/apt/sources.list.d/kubernetes.list
15 - sudo mkdir -p /etc/apt/keyrings
16 - curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.29/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
17 - sudo apt-get update
18 - sudo apt-get install -y kubelet=1.29.0-1.1 kubeadm=1.29.0-1.1 kubectl=1.29.0-1.1
19 - sudo apt-mark hold kubelet kubeadm kubectl

(on control plan)
 20 - sudo kubeadm init --pod-network-cidr=192.168.0.0/16 --kubernetes-version 1.29.0
(above will give you a command that will return a command to join a node)
 21 - mkdir -p $HOME/.kube 
(at home directory/folder)
 22 - sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
(to check permission firt run "ls -ld .kube/config")
 23 - sudo chown $(id -u):$(id -g) $HOME/.kube/config
  (please do not forget to install below steps)
(to check if it is running)
 24 - kubectl get nodes
install calico
26 - kubectl create -f https://raw.githubusercontent.com/projectcalico/calico/v3.25.0/manifests/tigera-operator.yaml
27 - kubectl create -f https://raw.githubusercontent.com/projectcalico/calico/v3.25.0/manifests/custom-resources.yaml

28 - kubectl get nodes
29 - kubeadm token create --print-join-command
(you need to past the outcome to all nodes)
30 - kubeadm token generate 
(above will generate a new token)
31 - kubeadm token create tun6vu.hdcsupw628llgyli --print-join-command

other steps - https://github.com/DEVOPS-WITH-WEB-DEV/Kubeadm-cluster-setup/blob/main/README.md

======================== SET up Ansible ===================================

$ sudo apt update
$ sudo apt install software-properties-common
$ sudo add-apt-repository --yes --update ppa:ansible/ansible
$ sudo apt install ansible

======================== SET up Jenkins ===================================
sudo apt update
sudo apt install fontconfig openjdk-17-jre
java -version
sudo wget -O /usr/share/keyrings/jenkins-keyring.asc \
  https://pkg.jenkins.io/debian-stable/jenkins.io-2023.key

echo "deb [signed-by=/usr/share/keyrings/jenkins-keyring.asc]" \
  https://pkg.jenkins.io/debian-stable binary/ | sudo tee \
  /etc/apt/sources.list.d/jenkins.list > /dev/null

sudo apt-get update
sudo apt-get install jenkins
sudo systemctl enable jenkins
sudo systemctl start jenkins
sudo systemctl status jenkins


======================== SET up docker ===========================================


# Add Docker's official GPG key:
sudo apt-get update
sudo apt-get install ca-certificates curl
sudo install -m 0755 -d /etc/apt/keyrings
sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
sudo chmod a+r /etc/apt/keyrings/docker.asc

# Add the repository to Apt sources:
echo \
  "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
  $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \
  sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
sudo apt-get update

sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
sudo docker run hello-world

(First check the docker group)
- cat /etc/group
- sudo usermod -aG docker ubuntu
- newgrp docker

(check if docker works)
docker images
====================================== Set up password less authentication ================================

In Source System,

1 - go to root directory like " cd ~"
2 type ssh-keygen

now to destination system.

1 -  go to root directory like " cd ~"
2-  cd /etc/ssh/
3  ls
4  vi ssh_config.d/
5  vi ssh_config  --- Enable "Passwordauthentication : Yes
6  cd sshd_config.d/
7  ls
8  vi 60-cloudimg-settings.conf " change to yes"
9  systemctl restart ssh
10  passwd ubuntu

  
