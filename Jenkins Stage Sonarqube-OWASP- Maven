
pipeline {
    agent any
    tools {
        jdk 'jkd11'
        maven 'maven3'
    }
    
    environment {
        SCANNER_HOME=  tool 'sonar-scanner'
    }

    stages {
        stage('Git fetch code') {
            steps {
                git 'https://github.com/MANOJ1804/Java-online-shopping.git'
            }
        }
        stage('Maven compile') {
            steps {
                sh "mvn clean compile"
            }
        }
        stage('Sonar Analysis') {
            steps {
                sh ''' $SCANNER_HOME/bin/sonar-scanner \
                -Dsonar.url=http://13.232.151.222/:9000/ \
                -Dsonar.login=squ_d04190499b958d1613f72fe1bf30692d52b3eaa2 \
                -Dsonar.projectName=shopping-cart \
                -Dsonar.java.binaries=. \
                -Dsonar.projectKey=shopping-cart
                '''
            }
        }
        stage('OWASP Dependenct check') {
            steps {
                dependencyCheck additionalArguments: ' --scan ./ ' , odcInstallation: 'DP'
                dependencyCheckPublisher pattern: '**/dependency-check-report.xml'
            }
        }
        stage('TRIVY File System SCAN') {
            steps {
                sh "trivy fs . > trivyfs.txt"
            }
        }
         stage('Maven Build') {
            steps {
                sh "mvn clean install -DskipTests=true"
            }
        }
        
        stage('Docker build and push image') {
            steps {
                script {
                    withDockerRegistry(credentialsId: 'docker_passs'){
                            sh "docker build -t shopping:latest -f docker/Dockerfile ."
                            sh "docker tag shopping:latest manojkumarab/shopping:latest"
                            sh "docker push manojkumarab/shopping:latest"
                        }
                }
            }
        }
        stage("TRIVY Docker image SCAN"){
            steps{
                sh "trivy image --timeout 10m manojkumarab/shopping:latest > trivyimage.txt"
            }
        }
        
        stage('CD Pipeline Trigger') {
            steps {
                build job: "cdstage" , wait: true
            }
        }
    }
}


-------------------------------- CD Pipeline trigger------------

pipeline {
    agent any

    stages {
        stage('CD Pipeline for docker container deploy') {
            steps {
                script {
                    withDockerRegistry(credentialsId: 'docker_hubpassword', toolName: 'docker') {
                            sh "docker run -d --name online-shopping-cart -p 8070:8070 manojkumarab/shopping:latest"
                        }
                }
            }
        }
    }
}

